/*
 * Buda Bizden Olsun
 *
 * https://www.youtube.com/channel/UCVnVbX4pFV01Nu7zUbV8exA
 *
 */


#include <LiquidCrystal_I2C.h>   
#include <Wire.h>                

unsigned char Bluetooth_val;       //defining variable val

LiquidCrystal_I2C lcd(0x27,16,2);  

#define Lpwm_pin  7   // L298N pin ENA  
#define Rpwm_pin  2   // L298N pin ENB

int pinLB=3;     // L298N pin EN1
int pinLF=4;     // L298N pin EN2
int pinRB=5;     // L298N pin EN3
int pinRF=6;     // L298N pin EN4

unsigned char Lpwm_val = 255;
unsigned char Rpwm_val = 255;

int Car_state=0;

int front_light   = 8;  // Ön farlar
int left_light    = 9;  // Sol sinyal
int right_light   = 10; // Sağ sinyal
int back_light    = 11; // Arka lambalar
int return_light  = 13; // Geri manevra lambası
int fog_light     = 44; // Sis lambası Mega kullanılacak ise
int horn          = 12; // Korna

void Car_Control(void)
{
  pinMode(pinLB,OUTPUT); 
  pinMode(pinLF,OUTPUT); 
  pinMode(pinRB,OUTPUT); 
  pinMode(pinRF,OUTPUT); 
  pinMode(Lpwm_pin,OUTPUT); 
  pinMode(Rpwm_pin,OUTPUT);  

  pinMode (front_light, OUTPUT);
  pinMode (left_light, OUTPUT);
  pinMode (right_light, OUTPUT);
  pinMode (back_light, OUTPUT);
  pinMode (return_light, OUTPUT);
  pinMode (fog_light, OUTPUT);
  pinMode (horn, OUTPUT);
}
void Set_Speed(unsigned char Left,unsigned char Right)
{
  analogWrite(Lpwm_pin,Left);
  analogWrite(Rpwm_pin,Right);
}

void go_forward ()     //  ileri hareket / going forward
    {
     digitalWrite(pinRB,LOW);  
     digitalWrite(pinRF,HIGH);
     digitalWrite(pinLB,LOW);  
     digitalWrite(pinLF,HIGH); 

     digitalWrite (left_light, LOW);
     digitalWrite (right_light, LOW);
     digitalWrite (return_light, LOW);
     digitalWrite (fog_light, LOW);
     digitalWrite (horn, LOW);
      
     
     Car_state = 1; 
     show_state();   
    }

void turn_right()        //sağa dönüş / turning right(dual wheel)
    {
     digitalWrite(pinRB,LOW);  
     digitalWrite(pinRF,HIGH);
     digitalWrite(pinLB,HIGH);
     digitalWrite(pinLF,LOW);  
     
     digitalWrite (left_light, LOW);
     digitalWrite (right_light, HIGH);
     digitalWrite (return_light, LOW);
     digitalWrite (fog_light, LOW);
     digitalWrite (horn, LOW);
  
     Car_state = 4;
     show_state();
    }

void turn_left()        // sola dönüş / turning left(dual wheel)
    {
     digitalWrite(pinRB,HIGH);
     digitalWrite(pinRF,LOW );   
     digitalWrite(pinLB,LOW);   
     digitalWrite(pinLF,HIGH);
     
     digitalWrite (left_light, HIGH);
     digitalWrite (right_light, LOW);
     digitalWrite (return_light, LOW);
     digitalWrite (fog_light, LOW);
     digitalWrite (horn, LOW);
     
     Car_state = 3;
     show_state();
    }    

void car_stop()         //durma / stop
    {
     digitalWrite(pinRB,HIGH);
     digitalWrite(pinRF,HIGH);
     digitalWrite(pinLB,HIGH);
     digitalWrite(pinLF,HIGH);

     digitalWrite (left_light, LOW);
     digitalWrite (right_light, LOW);
     digitalWrite (return_light, LOW);
     digitalWrite (fog_light, HIGH);
     digitalWrite (horn, LOW);

     
     Car_state = 5;
     show_state();
    }

void back()          // geri hareket / back up
    {
     digitalWrite(pinRB,HIGH);  
     digitalWrite(pinRF,LOW);
     digitalWrite(pinLB,HIGH);  
     digitalWrite(pinLF,LOW);

     digitalWrite (left_light, LOW);
     digitalWrite (right_light, LOW);
     digitalWrite (return_light, HIGH);
     digitalWrite (fog_light, LOW);
     digitalWrite (horn, HIGH);
     
     Car_state = 2;
     show_state() ;    
    }

    
 void light_F ()
 {
  digitalWrite (front_light, HIGH);

  Car_state = 6;
  show_state() ; 
 }

  void light_Fs ()
 {
  digitalWrite (front_light, LOW);
 }

 void light_B ()
 {
  digitalWrite (back_light, HIGH);

  Car_state = 7;
  show_state() ; 
 }

  void light_Bs ()
 {
  digitalWrite (back_light, LOW);
 }

 void light_S ()
 {   
  int a=0;
  
  while (a<=10) {
  a=a+1;
  
  digitalWrite (left_light, HIGH);
  digitalWrite (right_light, HIGH);
  delay (500);
 
  digitalWrite (left_light, LOW);
  digitalWrite (right_light, LOW);
  delay (500);
  }
 }
  void light_Ss ()
 {
  digitalWrite (left_light, LOW);
  digitalWrite (right_light, LOW);
 }

void horns ()
 {
  digitalWrite (horn, HIGH);
 }

  void horns_s ()
 {
  digitalWrite (horn, LOW);
 }
void show_state(void)
{
  lcd.setCursor(0, 1);
   switch(Car_state)
   {
     case 1:lcd.print(" Go  "); Serial.print ("\n GO");         
     break;
     case 2:lcd.print("Back "); Serial.print ("\n BACK");
                                Serial.print ("\n ........ return light");       
     break;
     case 3:lcd.print("Left "); Serial.print ("\n LEFT"); 
                                Serial.print ("\n ........ left light");        
     break;
     case 4:lcd.print("Right"); Serial.print ("\n RIGHT");
                                Serial.print ("\n ........ right light");          
     break;
     case 5:lcd.print("stop "); Serial.print ("\n STOP");
                                Serial.print ("\n ........ fong light");
     break;
     case 6 : Serial.print ("\n ......... front light");
     break;
     case 7 : Serial.print ("\n ........ back light");
     break;
     default:
     break;
   }
}              

void LCD_init(void)            
{
  lcd.init();   
  delay(10);   
  lcd.backlight(); 
  lcd.clear();     
}    

void setup() 
{ 
   LCD_init();
   Car_Control ();
   Set_Speed(Lpwm_val,Rpwm_val);
   Serial.begin(9600);   
   lcd.print("BudaBizdenOlsun");
   car_stop(); 
}

void loop() 
{  
   lcd.setCursor(0, 0);  
   lcd.print("Bluetooth Cntrl");
 
   if(Serial.available()) 
    {
     Bluetooth_val=Serial.read();  
    switch(Bluetooth_val)
     {
       case 'F' : go_forward(); //UP
       break;
       case 'B' : back();   //back
       break;
       case 'L' : turn_left();   //Left
       break;
       case 'R' : turn_right();  //Right
       break;
       case 'S' : car_stop();    //stop
       break;   
       case 'W' : light_F (); // front light on
       break;
       case 'w' : light_Fs (); // front light off
       break;
       case 'U' : light_B (); // back light on
       break;
       case 'u' : light_Bs (); // back light off
       break;
       case 'V' : horns (); // back light on
       break;
       case 'v' : horns_s (); // back light off
       break;
        case 'X' : light_S (); // switch light on
       break;
       case 'x' : light_Ss (); // switch light off
       break;
     }
    } 
}
